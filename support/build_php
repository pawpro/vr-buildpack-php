#!/bin/bash

source set-env.sh

set -e
set -o pipefail

orig_dir=$( pwd )

echo "+ Updating apt-get sources..."
apt-get -y update

echo "+ Installing build dependencies..."

apt-get -y install g++ \
gcc \
libpng-dev \
libxml2-dev \
libmysqlclient-dev \
libpq-dev \
libpcre3-dev \
libtidy-dev \
curl \
libtool \
libcurl3 \
libcurl3-dev \
libbz2-dev \
autoconf \
git-core

rm -rf /app
rm -rf /root/build
mkdir -p build
pushd build

if [[ -n "$LIBMCRYPT_VERSION" ]]; then
    echo "+ Fetching libmcrypt libraries..."
    mkdir -p /app/local
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/libmcrypt-${LIBMCRYPT_VERSION}.tar.gz" -o - | tar xz -C /app/local
else
    echo "- Skipping libmcrypt"
fi

if [[ -n "$OPENSSL_VERSION" ]]; then
    echo "+ Fetching openssl sources..."
    mkdir -p /app/local
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/openssl_${OPENSSL_VERSION}.tar.gz" -o - | tar xz
    pushd openssl_${OPENSSL_VERSION}
    ./config --prefix=/app/local --openssldir=/app/local/openssl shared no-threads no-ssl2
    make
    make install
    popd
else
    echo "- Skipping openssl"
fi

if [[ -n "$LIBMEMCACHED_VERSION" ]]; then
    echo "+ Fetching libmemcached libraries..."
    mkdir -p /app/local
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/libmemcached-${LIBMEMCACHED_VERSION}.tar.gz" -o - | tar xz
    pushd libmemcached-${LIBMEMCACHED_VERSION}
    ./configure --prefix=/app/local
    make install
    popd
else
    echo "- Skipping libmemcached"
fi

if [[ -n "$LIBFREETYPE_VERSION" ]]; then
    echo "+ Fetching freetype libraries..."
    mkdir -p /app/local
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/freetype-${LIBFREETYPE_VERSION}.tar.gz" -o - | tar xz
    pushd freetype-${LIBFREETYPE_VERSION}
    ./configure --prefix=/app/local
    make install
    popd
else
    echo "- Skipping Custom Freetype"
fi

if [[ -n "$LIBJPEG_VERSION" ]]; then
    echo "+ Fetching libjpeg libraries..."
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/jpegsrc.v${LIBJPEG_VERSION}.tar.gz" | tar xz
    pushd jpeg-${LIBJPEG_VERSION}
    ./configure --prefix=/app/local
    make install
    popd
else
    echo "- Skipping libjpeg"
fi

if [[ -n "$LIBRABBITMQ_VERSION" ]]; then
    echo "+ Fetching RABBITMQ-C libraries..."
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/rabbitmq-c-${LIBRABBITMQ_VERSION}.tar.gz" | tar xz
    pushd rabbitmq-c-${LIBRABBITMQ_VERSION}
    ./configure --prefix=/app/local
    make install
    popd
else
    echo "- Skipping RABBITMQ-C"
fi

if [[ -n "$LIBYAML_VERSION" ]]; then
    echo "+ Fetching libyaml libraries..."
    mkdir -p /app/local
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/libyaml-${LIBYAML_VERSION}.tar.gz" -o - | tar xz
    pushd libyaml-${LIBYAML_VERSION}
    ./bootstrap
    ./configure --prefix=/app/local --includedir=/app/local/include
    make install
    popd
else
    echo "- Skipping libyaml"
fi

echo "+ Fetching PHP sources..."
curl -L "http://s3.amazonaws.com/${S3_BUCKET}/php-$PHP_VERSION.tar.gz"  -o - | tar xz

pushd php-$PHP_VERSION

echo "+ Configuring PHP..."
rm configure
./buildconf --force
./configure \
--prefix=/app/vendor/php \
--with-config-file-path=/app/vendor/php \
--with-config-file-scan-dir=/app/vendor/php/etc.d \
--with-freetype-dir=/app/local \
--with-mcrypt=/app/local \
--with-mysql=mysqlnd \
--with-mysqli=mysqlnd \
--with-pdo-mysql=mysqlnd \
--with-bz2 \
--with-curl \
--with-gd \
--with-gettext \
--with-jpeg-dir=/app/local \
--with-iconv \
--with-mhash \
--with-openssl \
--with-openssl-dir=/app/local \
--with-pcre-regex \
--with-png-dir \
--with-zlib \
--enable-bcmath \
--enable-fpm \
--enable-gd-native-ttf \
--enable-inline-optimization \
--enable-libxml \
--enable-opcache \
--enable-phar \
--enable-mbregex \
--enable-mbstring \
--enable-zip \
--disable-cgi \
--disable-cli \
--disable-debug \
--disable-pcntl \
--disable-rpath \
--disable-soap

echo "+ Compiling PHP..."
# build & install it
make install

popd

# update path
export PATH=/app/vendor/php/bin:$PATH

if [[ -n "$PHP_MEMCACHE_VERSION" ]]; then
    echo "+ Installing PHP_Memcache..."
    curl -L "https://s3.amazonaws.com/${S3_BUCKET}/memcache-${PHP_MEMCACHE_VERSION}.tgz" | tar xz
    pushd memcache-${PHP_MEMCACHE_VERSION}
    phpize
    ./configure --prefix=/app/local --with-php-config=/app/vendor/php/bin/php-config
    make install
else
    echo "- Skipping PHP_Memcache"
fi

if [[ -n "$PHP_MEMCACHED_VERSION" ]]; then
    echo "+ Installing PHP_Memcached..."
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/memcached-${PHP_MEMCACHED_VERSION}.tgz" | tar xz
    pushd memcached-${PHP_MEMCACHED_VERSION}
    phpize
    ./configure --prefix=/app/local --with-php-config=/app/vendor/php/bin/php-config --with-libmemcached-dir=/app/local --disable-memcached-sasl
    make install
    popd
else
    echo "- Skipping PHP_Memcached"
fi

if [[ -n "$PHP_RABBITMQ_VERSION" ]]; then
    echo "+ Installing PHP_RabbitMQ..."
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/amqp-${PHP_RABBITMQ_VERSION}.tgz" | tar xz
    pushd amqp-${PHP_RABBITMQ_VERSION}
    phpize
    ./configure --with-amqp --with-librabbitmq-dir=/app/local --with-php-config=/app/vendor/php/bin/php-config
    make install
    popd
else
    echo "- Skipping PHP_RabbitMQ"
fi

if [[ -n "$PHP_NEWRELIC_VERSION" ]]; then
    echo "+ Install newrelic..."
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/newrelic-php5-${PHP_NEWRELIC_VERSION}-linux.tar.gz" | tar xz
    pushd newrelic-php5-${PHP_NEWRELIC_VERSION}-linux
    cp -f agent/x64/newrelic-`phpize --version | grep "Zend Module Api No" | tr -d ' ' | cut -f 2 -d ':'`.so `php-config --extension-dir`/newrelic.so
    mkdir -p /app/vendor/newrelic
    cp -f daemon/newrelic-daemon.x64 /app/vendor/newrelic/newrelic-daemon.x64 && chmod +x /app/vendor/newrelic/newrelic-daemon.x64 && strip /app/vendor/newrelic/newrelic-daemon.x64

    popd
else
    echo "- Skipping PHP_NewRelic"
fi

if [[ -n "$XHPROF_VERSION" ]]; then
    echo "+ Installing XHProf..."
    curl -L "https://s3.amazonaws.com/${S3_BUCKET}/xhprof-${XHPROF_VERSION}.tar.gz" | tar xz
    pushd xhprof-${XHPROF_VERSION}
    phpize
    ./configure --enable-xhprof --with-php-config=/app/vendor/php/bin/php-config
    make install
    popd
else
    echo "- Skipping XHProf"
fi

if [[ -n "$PHP_YAML_VERSION" ]]; then
    echo "+ Installing PHP_YAML..."
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/yaml-${PHP_YAML_VERSION}.tgz" | tar xz
    pushd yaml-${PHP_YAML_VERSION}
    phpize
    ./configure --with-php-config=/app/vendor/php/bin/php-config --with-yaml=/app/local/
    make install
    popd
else
    echo "- Skipping PHP_YAML"
fi

if [[ -n "$SUHOSIN_VERSION" ]]; then
    echo "+ Installing Suhosin..."
    curl -L "https://s3.amazonaws.com/${S3_BUCKET}/suhosin-${SUHOSIN_VERSION}.tgz" | tar xz
    pushd suhosin-${SUHOSIN_VERSION}
    phpize
    ./configure --enable-suhosin --with-php-config=/app/vendor/php/bin/php-config
    make install
    popd
else
    echo "- Skipping Suhosin"
fi

echo "+ Cleanup"
rm -rf /app/local/include
rm -rf /app/vendor/php/include

pushd /app/
echo "+ Stripping binaries..."
set +e
find local/bin local/lib vendor -regex ".*\.\(so\|so\.([0-9]\.?)+\)" -exec strip {} \;
find local/bin -exec strip {} \;
find vendor -regex "[^/]+/.*\(s\)?bin/[^.]*" -exec strip {} \;
set -e
popd

echo "+ Packaging PHP..."
echo ${PHP_VERSION} > /app/vendor/php/VERSION
pushd /app/vendor/php

tar czf $orig_dir/php-${PHP_VERSION}-with-fpm-vr.tar.gz *
popd

pushd /app/local
tar czf $orig_dir/php-${PHP_VERSION}-libs-vr.tar.gz *
popd

popd

echo "+ Binaries are packaged in $orig_dir/*.tar.gz. Upload to s3 bucket of your choice."
echo "+ Done!"
