#!/bin/bash

source set-env.sh

set -e
set -o pipefail

orig_dir=$( pwd )

echo "+ Updating apt-get sources..."
apt-get -y update

echo "+ Installing build dependencies..."
BUILD_DIR="/tmp/build"
apt-get -y install g++ \
gcc \
libxml2-dev \
libmysqlclient-dev \
libpq-dev \
libpcre3-dev \
libtidy-dev \
curl \
libtool \
libicu-dev \
libbz2-dev \
autoconf \
git-core \
libpng-dev \
yasm

rm -rf /app
rm -rf ${BUILD_DIR}
mkdir -p ${BUILD_DIR}
pushd ${BUILD_DIR}

if [[ -n "$LIBMCRYPT_VERSION" ]]; then
    echo "+ Fetching libmcrypt libraries..."
    mkdir -p /app/local
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/libmcrypt-${LIBMCRYPT_VERSION}.tar.gz" -o - | tar xz -C /app/local
else
    echo "- Skipping libmcrypt"
fi

if [[ -n "$OPENSSL_VERSION" ]]; then
    echo "+ Fetching openssl sources..."
    mkdir -p /app/local
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/openssl_${OPENSSL_VERSION}.tar.gz" -o - | tar xz
    pushd openssl_${OPENSSL_VERSION}
    set +o pipefail
    make clean || true
    set -o pipefail
    ./config --prefix=/app/local --openssldir=/app/local/openssl no-shared no-threads no-ssl2
    make install
    popd
else
    echo "- Skipping openssl"
fi

if [[ -n "$ZLIB_VERSION" ]]; then
    echo "+ Fetching zlib sources..."
    mkdir -p /app/local
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/zlib-${ZLIB_VERSION}.tar.gz" -o - | tar xz
    pushd zlib-${ZLIB_VERSION}
    ./configure --prefix=/app/local --static
    set +o pipefail
    make install || true
    set -o pipefail
    popd
else
    echo "- Skipping zlib"
fi

if [[ -n "$LIBCURL_VERSION" ]]; then
    echo "+ Fetching libcurl sources..."
    mkdir -p /app/local
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/curl-${LIBCURL_VERSION}.tar.gz" -o - | tar xz
    pushd curl-${LIBCURL_VERSION}
    ./configure --enable-static --disable-shared --prefix=/app/local --with-ssl=/app/local --with-zlib=/app/local --without-libidn --without-librtmp --disable-crypto-auth --disable-manual --disable-gopher --disable-smb --disable-smtp --disable-tftp --disable-telnet --disable-ldaps --disable-rtsp --disable-ldap LIBS=-ldl
    make CFLAGS="${CFLAGS} -static-libgcc"
    make install
    popd
else
    echo "- Skipping libcurl"
fi

if [[ -n "$LIBMEMCACHED_VERSION" ]]; then
    echo "+ Fetching libmemcached libraries..."
    mkdir -p /app/local
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/libmemcached-${LIBMEMCACHED_VERSION}.tar.gz" -o - | tar xz
    pushd libmemcached-${LIBMEMCACHED_VERSION}
    ./configure --prefix=/app/local --enable-static --disable-shared
    make install
    popd
else
    echo "- Skipping libmemcached"
fi

if [[ -n "$LIBFREETYPE_VERSION" ]]; then
    echo "+ Fetching freetype libraries..."
    mkdir -p /app/local
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/freetype-${LIBFREETYPE_VERSION}.tar.gz" -o - | tar xz
    pushd freetype-${LIBFREETYPE_VERSION}
    ./configure --prefix=/app/local --enable-static --disable-shared
    set +o pipefail
    make install || true
    set -o pipefail
    popd
else
    echo "- Skipping Custom Freetype"
fi

if [[ -n "$LIBJPEG_VERSION" ]]; then
    echo "+ Fetching libjpeg libraries..."
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/jpegsrc.v${LIBJPEG_VERSION}.tar.gz" | tar xz
    pushd jpeg-${LIBJPEG_VERSION}
    ./configure --prefix=/app/local
    make install
    popd
else
    echo "- Skipping libjpeg"
fi

if [[ -n "$LIBJPEG_TURBO_VERSION" ]]; then
    echo "+ Fetching libjpeg-turbo libraries..."
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/libjpeg-turbo-${LIBJPEG_TURBO_VERSION}.tar.gz" | tar xz
    pushd libjpeg-turbo-${LIBJPEG_TURBO_VERSION}
    set +o pipefail
    make clean || true
    set -o pipefail
    ./configure --prefix=/app/local --enable-static --disable-shared --with-ssl=/app/local
    make install
    popd
else
    echo "- Skipping libjpeg-turbo"
fi

if [[ -n "$LIBRABBITMQ_VERSION" ]]; then
    echo "+ Fetching RABBITMQ-C libraries..."
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/rabbitmq-c-${LIBRABBITMQ_VERSION}.tar.gz" | tar xz
    pushd rabbitmq-c-${LIBRABBITMQ_VERSION}
    ./configure --prefix=/app/local
    make install
    popd
else
    echo "- Skipping RABBITMQ-C"
fi

if [[ -n "$LIBYAML_VERSION" ]]; then
    echo "+ Fetching libyaml libraries..."
    mkdir -p /app/local
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/libyaml-${LIBYAML_VERSION}.tar.gz" -o - | tar xz
    pushd libyaml-${LIBYAML_VERSION}
    ./bootstrap
    ./configure --prefix=/app/local --enable-static --disable-shared --includedir=/app/local/include
    make install
    popd
else
    echo "- Skipping libyaml"
fi
 
echo "+ Fetching PHP sources..."
curl -L "http://s3.amazonaws.com/${S3_BUCKET}/php-$PHP_VERSION.tar.gz"  -o - | tar xz

pushd php-$PHP_VERSION

pushd ext

    if [[ -n "$PHP_MEMCACHE_VERSION" ]]; then
        echo "+ Installing PHP_Memcache..."
        curl -L "https://s3.amazonaws.com/${S3_BUCKET}/memcache-${PHP_MEMCACHE_VERSION}.tgz" | tar xz
        mv memcache-${PHP_MEMCACHE_VERSION} memcache
        pushd memcache
        phpize
        popd
    else
        echo "- Skipping PHP_Memcache"
    fi

    if [[ -n "$PHP_MEMCACHED_VERSION" ]]; then
        echo "+ Installing PHP_Memcached..."
        curl -L "http://s3.amazonaws.com/${S3_BUCKET}/memcached-${PHP_MEMCACHED_VERSION}.tgz" | tar xz
        mv memcached-${PHP_MEMCACHED_VERSION} memcached
        pushd memcached
        phpize
        popd
    else
        echo "- Skipping PHP_Memcached"
    fi

    if [[ -n "$PHP_RABBITMQ_VERSION" ]]; then
        echo "+ Installing PHP_RabbitMQ..."
        curl -L "http://s3.amazonaws.com/${S3_BUCKET}/amqp-${PHP_RABBITMQ_VERSION}.tgz" | tar xz
        mv amqp-${PHP_RABBITMQ_VERSION} amqp
        pushd amqp
        phpize
        popd
    else
        echo "- Skipping PHP_RabbitMQ"
    fi

    if [[ -n "$XHPROF_VERSION" ]]; then
        echo "+ Installing XHProf..."
        curl -L "https://s3.amazonaws.com/${S3_BUCKET}/xhprof-${XHPROF_VERSION}.tar.gz" | tar xz
        mv xhprof-${XHPROF_VERSION} xhprof
        pushd xhprof
        phpize
        popd
    else
        echo "- Skipping XHProf"
    fi

    if [[ -n "$PHP_YAML_VERSION" ]]; then
        echo "+ Installing PHP_YAML..."
        curl -L "http://s3.amazonaws.com/${S3_BUCKET}/yaml-${PHP_YAML_VERSION}.tgz" | tar xz
        mv yaml-${PHP_YAML_VERSION} yaml
        pushd yaml
        phpize
        popd
    else
        echo "- Skipping PHP_YAML"
    fi

    if [[ -n "$SUHOSIN_VERSION" ]]; then
        echo "+ Installing Suhosin..."
        curl -L "https://s3.amazonaws.com/${S3_BUCKET}/suhosin-${SUHOSIN_VERSION}.tar.gz" | tar xz
        mv suhosin-${SUHOSIN_VERSION} suhosin
        pushd suhosin
        phpize
        popd
    else
        echo "- Skipping Suhosin"
    fi
popd

echo "+ Configuring PHP..."
if [[ -f configure ]]; then
    rm configure
fi

./buildconf --force
./configure \
    --disable-all \
    --enable-static \
    --prefix=/app/vendor/php \
    --with-config-file-path=/app/vendor/php \
    --with-config-file-scan-dir=/app/vendor/php/etc.d \
    --with-bz2 \
    --with-curl=/app/local \
    --with-gd \
    --with-gettext \
    --with-iconv \
    --with-jpeg-dir=/app/local \
    --with-mhash \
    --with-mysql=mysqlnd \
    --with-mysqli=mysqlnd \
    --with-pdo-mysql=mysqlnd \
    --with-openssl-dir=/app/local \
    --with-pcre-regex \
    --with-png-dir=/app/local \
    --with-zlib-dir=/app/local \
    --with-yaml=/app/local/ \
    --enable-bcmath \
    --enable-cli \
    --enable-fpm \
    --enable-intl \
    --enable-libxml \
    --enable-pdo \
    --enable-phar \
    --enable-mbstring \
    --enable-mbregex \
    --enable-gd-native-ttf \
    --enable-inline-optimization \
    --enable-memcache \
    --enable-memcached \
    --enable-session \
    --enable-suhosin \
    --enable-zip \
    --with-libmemcached-dir=/app/local --disable-memcached-sasl
    # --enable-opcache \
    # --enable-xhprof


echo "+ Compiling PHP..."
# build & install it
make install

popd

if [[ -n "$PHP_NEWRELIC_VERSION" ]]; then
    echo "+ Install newrelic..."
    curl -L "http://s3.amazonaws.com/${S3_BUCKET}/newrelic-php5-${PHP_NEWRELIC_VERSION}-linux.tar.gz" | tar xz
    pushd newrelic-php5-${PHP_NEWRELIC_VERSION}-linux
    cp -f agent/x64/newrelic-`phpize --version | grep "Zend Module Api No" | tr -d ' ' | cut -f 2 -d ':'`.so `php-config --extension-dir`/newrelic.so
    mkdir -p /app/vendor/php/newrelic
    cp -f daemon/newrelic-daemon.x64 /app/vendor/php/newrelic/newrelic-daemon.x64 && chmod +x /app/vendor/php/newrelic/newrelic-daemon.x64 && strip /app/vendor/php/newrelic/newrelic-daemon.x64

    popd
else
    echo "- Skipping PHP_NewRelic"
fi

# update path
export PATH=/app/vendor/php/bin:$PATH

echo "+ Cleanup"
rm -rf /app/local/include
rm -rf /app/vendor/php/include

pushd /app/
echo "+ Stripping binaries..."
set +e
find local/bin local/lib vendor -regex ".*\.\(so\|so\.([0-9]\.?)+\)" -exec strip {} \;
find local/bin -exec strip {} \;
find vendor -regex "[^/]+/.*\(s\)?bin/[^.]*" -exec strip {} \;
set -e
popd

echo "+ Packaging PHP..."
echo ${PHP_VERSION} > /app/vendor/php/VERSION
pushd /app/vendor/php

tar czf $orig_dir/php-${PHP_VERSION}-with-fpm-vr${BUILD_SUFFIX}.tar.gz *
popd

pushd /app/local
tar czf $orig_dir/php-${PHP_VERSION}-libs-vr${BUILD_SUFFIX}.tar.gz *
popd

popd

echo "+ Binaries are packaged in $orig_dir/*.tar.gz. Upload to s3 bucket of your choice."
echo "+ Done!"
